spring.application.name=userservice
server.port=8081

# postgres db configuration
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres

# Define specific driver to make it faster otherwise it will search default by going through entire
spring.datasource.driverClassName=org.postgresql.Driver

## Not required to use it explicitly
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)


# Server configuration
#server.port=9000

# Logging configuration
#logging.level.org.springframework.security=trace
#logging.level.org.springframework.*=trace

# Spring security configurations
#spring.security.user.name=user
#spring.security.user.password=password

# OAuth2 Authorization Server configuration
# Adding a client for OAuth Server.
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-id=oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-secret={noop}secret
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.client-authentication-methods=client_secret_basic
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.authorization-grant-types=authorization_code,refresh_token
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.redirect-uris=http://127.0.0.1:8080/login/oauth2/code/oidc-client
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.post-logout-redirect-uris=http://127.0.0.1:8080/
#spring.security.oauth2.authorizationserver.client.oidc-client.registration.scopes=openid,profile
#spring.security.oauth2.authorizationserver.client.oidc-client.require-authorization-consent=true
#logging.level.org.springframework.security.*=TRACE

